@inject IGetTodayTransactonsUseCase GetTodayTransactonsUseCase


@if (_transactions != null && _transactions.Count() > 0 )
{
    <table class="table">
        <thead>
            <tr>
                <th>Cashier Name</th>
                <th>Product Name</th>
                <th>Time</th>
                <th>Qty Before</th>
                <th>Qty Sold</th>
                <th>Qty After</th>
                <th>Sold Amt</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tran in _transactions)
            {
                <tr>
                    <td>@tran.CashierName</td>
                    <td>@tran.ProductName</td>
                    <td>@tran.Timestamp.ToShortTimeString()</td>
                    <td>@tran.BeforeQuantity</td>
                    <td>@tran.SoldQuantity</td>
                    <td>@(tran.BeforeQuantity  - tran.SoldQuantity)</td>
                    <td>@((tran.SoldQuantity * tran.Price).ToString("c"))</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Transaction> _transactions;

    public void LoadTransactions(string cashierName)
    {
        if (string.IsNullOrEmpty(cashierName))
        {
            _transactions = new List<Transaction>();
            StateHasChanged();
            return;
        }
        Console.WriteLine($"Load Transactions: Cashier name: {cashierName}");
        _transactions = GetTodayTransactonsUseCase.Execute(cashierName).ToList();
        StateHasChanged();
    }
}
