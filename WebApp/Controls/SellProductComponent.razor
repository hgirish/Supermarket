@inject IGetProductByIdUseCase GetProductByIdUseCase 
@inject ISellProductUseCase SellProductUseCase

@if (_productToSell != null)
{
    <EditForm Model="_productToSell" OnValidSubmit="SellProduct">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Product Name</label>
            <input class="form-control" id="name" type="text" readonly value="@_productToSell.Name" />
        </div>
        <div class="form-group">
            <label for="price">Price</label>
            <input class="form-control" id="price" type="text" readonly value="@(string.Format("{0:c}", _productToSell.Price))" />
        </div>
        <div class="form-group">
            <label for="qty">Quntity</label>
            <InputNumber id="qty" @bind-Value="_productToSell.Quantity" class="form-control"></InputNumber>
        </div>
        <button type="submit" class="btn btn-primary">Sell</button>
    </EditForm>
    <br />
    @if (!string.IsNullOrWhiteSpace(_errorMessage))
    {
        <div class="alert alert-danger">@_errorMessage</div>

    }
}


@code {
    [Parameter]
    public Product SelectedProduct { get; set; }

    private Product _productToSell;
    private string _errorMessage;

    [Parameter]
    public EventCallback<Product> OnProductSold { get; set; }

    [Parameter]
    public required string CashierName { get; set; } 

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (SelectedProduct != null)
        {
            _productToSell = new Product
            {
                ProductId = SelectedProduct.ProductId,
                Name = SelectedProduct.Name,
                CategoryId = SelectedProduct.CategoryId,
                Price = SelectedProduct.Price,
                Quantity = 0
            };
        }
        else
        {
            _productToSell = null;
        }

    }

    private void SellProduct()
    {
        if (string.IsNullOrWhiteSpace(CashierName))
        {
            _errorMessage = "The Cashier's name is missing";
            return;
        }
        var product = GetProductByIdUseCase.Execute(_productToSell.ProductId);
        if (product == null)
        {
            _errorMessage = "Product does not exist.";
            return;
        }
        if (_productToSell.Quantity <= 0)
        {
            _errorMessage = "The quantity has to be greater than zero.";
        }
        else if (product.Quantity >= _productToSell.Quantity)
        {
            if (string.IsNullOrWhiteSpace(CashierName))
            {
                throw new ApplicationException("Cashier's name is missing, cannot sell product");
            }
            _errorMessage = string.Empty;
            SellProductUseCase.Execute(CashierName, _productToSell.ProductId, _productToSell.Quantity.Value);
            OnProductSold.InvokeAsync(_productToSell);

        }       
        else
        {
            _errorMessage = $"{product.Name} only has {product.Quantity} left, it is not enough.";
        }
        
    }
}
